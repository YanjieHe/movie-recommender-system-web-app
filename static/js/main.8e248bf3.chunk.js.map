{"version":3,"sources":["Movies.js","App.js","serviceWorker.js","index.js"],"names":["Movies","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","search","i","length","push","id","movie","updateState","bind","assertThisInitialized","searchMovie","e","setState","target","value","index","includes","alert","ReactDOM","findDOMNode","refs","myInput","focus","react_default","a","createElement","onChange","ref","onClick","map","dynamicComponent","App_Content","key","componentData","React","Component","Content","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAaeA,SAbF,CACb,kCACA,uBACA,4BACA,+BACA,gCACA,oBACA,uDACA,8CACA,4CACA,sBCHMC,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,KAAM,GACNC,OAAQ,IAGZ,IAAI,IAAIC,EAAI,EAAGA,EAAIb,EAAOc,OAAQD,IAC9BV,EAAKO,MAAMC,KAAKI,KAAK,CAACC,GAAMH,EAAI,EAAGI,MAASjB,EAAOa,KATxC,OAYfV,EAAKe,YAAcf,EAAKe,YAAYC,KAAjBf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KACnBA,EAAKkB,YAAclB,EAAKkB,YAAYF,KAAjBf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KAbJA,2EAgBPmB,GACRhB,KAAKiB,SAAS,CAACX,OAAQU,EAAEE,OAAOC,8CAMhC,IAFA,IAAId,EAAO,GACPe,EAAQ,EACJb,EAAI,EAAGA,EAAIb,EAAOc,OAAQD,IAC3Bb,EAAOa,GAAGc,SAASrB,KAAKI,MAAME,UAC7BD,EAAKI,KAAK,CAACC,GAAMU,EAAOT,MAASjB,EAAOa,KACxCa,GAAgB,GAGxBE,MAAM,qCAAuCtB,KAAKI,MAAME,QACxDN,KAAKiB,SAAS,CAACZ,KAAMA,EAAMC,OAAQ,KACnCiB,IAASC,YAAYxB,KAAKyB,KAAKC,SAASC,yCAIxC,OACIC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mkBAuBIF,EAAAC,EAAAC,cAAA,SAAOX,MAAOnB,KAAKI,MAAME,OACrByB,SAAY/B,KAAKY,YACjBoB,IAAI,YAERJ,EAAAC,EAAAC,cAAA,UAAQG,QAASjC,KAAKe,aAAtB,UAGAa,EAAAC,EAAAC,cAAA,aACK9B,KAAKI,MAAMC,KAAK6B,IACb,SAACC,EAAkB5B,GAAnB,OACIqB,EAAAC,EAAAC,cAACM,EAAD,CAASC,IAAO9B,EACZ+B,cAAiBH,eAxE/BI,IAAMC,WA+ElBC,cACF,SAAAA,EAAY7C,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAyC,GAAA3C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2C,GAAAtC,KAAAH,KACVJ,0EAGN,OACIgC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,cAAM9B,KAAKJ,MAAM0C,cAAc5B,GAA/B,KACAkB,EAAAC,EAAAC,cAAA,cAAM9B,KAAKJ,MAAM0C,cAAc3B,MAA/B,cATE4B,IAAMC,WAgBb7C,IC1FK+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNvB,IAASwB,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8e248bf3.chunk.js","sourcesContent":["let Movies = [\n\"The Shawshank Redemption (1994)\",\n\"The Godfather (1972)\",\n\"The Usual Suspects (1995)\",\n\"Schindler’s List (1993)\",\n\"The Godfather: Part II (1974)\",\n\"Fight Club (1999)\",\n\"Indiana Jones and the Raiders of the Lost Ark (1981)\",\n\"One Flew Over the Cuckoo’s Nest (1975)\",\n\"Star Wars: Episode IV - A New Hope (1977)\",\n\"Casablanca (1942)\"\n]\n\nexport default Movies;\n","// import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\"\nimport Movies from \"./Movies.js\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            search: \"\"\n        }\n\n        for(var i = 0; i < Movies.length; i++) {\n            this.state.data.push({\"id\": i + 1, \"movie\": Movies[i]});\n        }\n\n        this.updateState = this.updateState.bind(this);\n        this.searchMovie = this.searchMovie.bind(this);\n    }\n    \n    updateState(e) {\n        this.setState({search: e.target.value});\n    }\n\n    searchMovie() {\n        let data = [ ];\n        let index = 1\n        for(var i = 0; i < Movies.length; i++) {\n            if(Movies[i].includes(this.state.search)) {\n                data.push({\"id\": index, \"movie\": Movies[i]});\n                index = index + 1\n            }\n        }\n        alert(\"You searched movies with keyword: \" + this.state.search)\n        this.setState({data: data, search: \"\"});\n        ReactDOM.findDOMNode(this.refs.myInput).focus();\n    }\n\n    render() {\n        return (\n            <div>\n            <style> {`\n            table {\n                font-family: arial, sans-serif;\n                border-collapse: collapse;\n                width: 100%;\n            }\n\n            td {\n                border: 1px solid #dddddd;\n                text-align: left;\n                padding: 8px;\n            }\n\n            th {\n                border: 1px solid #dddddd;\n                text-align: left;\n                padding: 8px;\n            }\n\n            tr:nth-child(even) {\n                background-color: #dddddd;\n            }\n            `}</style>\n                <input value={this.state.search}\n                    onChange = {this.updateState}\n                    ref=\"myInput\">\n                </input>\n                <button onClick={this.searchMovie}>\n                Search\n                </button>\n                <table>\n                    {this.state.data.map(\n                        (dynamicComponent, i) =>\n                            <Content key = {i}\n                                componentData = {dynamicComponent}/>)}\n                </table>\n            </div>\n        );\n    }\n}\n\nclass Content extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <tr>\n                    <td> {this.props.componentData.id} </td>\n                    <td> {this.props.componentData.movie} </td>\n                </tr>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}