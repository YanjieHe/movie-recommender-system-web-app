{"version":3,"sources":["Movies.js","App.js","serviceWorker.js","index.js"],"names":["Movies","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","search","updateState","bind","assertThisInitialized","searchMovie","e","setState","target","value","i","length","includes","push","ReactDOM","findDOMNode","refs","myInput","focus","react_default","a","createElement","onChange","ref","onClick","map","dynamicComponent","App_Content","componentData","React","Component","Content","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAaeA,SAbF,CACb,kCACA,uBACA,4BACA,+BACA,gCACA,oBACA,uDACA,8CACA,4CACA,sBCHMC,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,KAAMX,EACNY,OAAQ,IAGZT,EAAKU,YAAcV,EAAKU,YAAYC,KAAjBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACnBA,EAAKa,YAAcb,EAAKa,YAAYF,KAAjBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KATJA,2EAYPc,GACRX,KAAKY,SAAS,CAACN,OAAQK,EAAEE,OAAOC,8CAIhCd,KAAKI,MAAMC,KAAO,GAClB,IAAI,IAAIU,EAAI,EAAGA,EAAIrB,EAAOsB,OAAQD,IAC3BrB,EAAOqB,GAAGE,SAASjB,KAAKI,MAAME,SAC7BN,KAAKI,MAAMC,KAAKa,KAAKxB,EAAOqB,IAGpCf,KAAKY,SAAS,CAACN,OAAQ,KACvBa,IAASC,YAAYpB,KAAKqB,KAAKC,SAASC,yCAIxC,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOZ,MAAOd,KAAKI,MAAME,OACrBqB,SAAY3B,KAAKO,YACjBqB,IAAI,YAERJ,EAAAC,EAAAC,cAAA,UAAQG,QAAS7B,KAAKU,aAAtB,UAGAc,EAAAC,EAAAC,cAAA,UAAK1B,KAAKI,MAAMC,KAAKyB,IACjB,SAACC,EAAkBhB,GAAnB,OACIS,EAAAC,EAAAC,cAACM,EAAD,CAASC,cAAeF,eAxC9BG,IAAMC,WA8ClBC,mLAEE,OACIZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YACC1B,KAAKJ,MAAMqC,cACZT,EAAAC,EAAAC,cAAA,oBANMQ,IAAMC,WAabxC,ICtDK0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNtB,IAASuB,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d7a43d30.chunk.js","sourcesContent":["let Movies = [\n\"The Shawshank Redemption (1994)\",\n\"The Godfather (1972)\",\n\"The Usual Suspects (1995)\",\n\"Schindler’s List (1993)\",\n\"The Godfather: Part II (1974)\",\n\"Fight Club (1999)\",\n\"Indiana Jones and the Raiders of the Lost Ark (1981)\",\n\"One Flew Over the Cuckoo’s Nest (1975)\",\n\"Star Wars: Episode IV - A New Hope (1977)\",\n\"Casablanca (1942)\"\n]\n\nexport default Movies;\n","// import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\"\nimport Movies from \"./Movies.js\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: Movies,\n            search: \"\"\n        }\n\n        this.updateState = this.updateState.bind(this);\n        this.searchMovie = this.searchMovie.bind(this);\n    }\n    \n    updateState(e) {\n        this.setState({search: e.target.value});\n    }\n\n    searchMovie() {\n        this.state.data = [ ];\n        for(var i = 0; i < Movies.length; i++) {\n            if(Movies[i].includes(this.state.search)) {\n                this.state.data.push(Movies[i]);\n            }\n        }\n        this.setState({search: \"\"});\n        ReactDOM.findDOMNode(this.refs.myInput).focus();\n    }\n\n    render() {\n        return (\n            <div>\n                <input value={this.state.search}\n                    onChange = {this.updateState}\n                    ref=\"myInput\">\n                </input>\n                <button onClick={this.searchMovie}>\n                Search\n                </button>\n                <h4>{this.state.data.map(\n                    (dynamicComponent, i) =>\n                        <Content componentData={dynamicComponent}/>)}</h4>\n            </div>\n        );\n    }\n}\n\nclass Content extends React.Component {\n    render() {\n        return (\n            <div>\n                <span>\n                {this.props.componentData}\n                <br />\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}